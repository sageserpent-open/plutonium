Tests:-

1. 'World.revise' should do a dry-run of changes before it commits the new revision. It should provide the strong exception guarantee if any of the changes throws an admissible failure or precondition violation.

A nice way of doing this would be to have injected faulty changes within ordinary changes - could then verify that the world still behaves the same way as if it was revised with just the ordinary changes.

Do this with both the history ids used to generate the expected results, plus introduce some additional ids to prove that they do not appear in the overall history.
(DONE)

2. 'WorldSpec' needs to include a test that shows that the effects of a revision in a scope are captured from a snapshot and are unaffected by any subsequent world revisions.
(DONE)

3. Do we need to show that chunking the same histories in different ways yields the same result as long as scope cutoffs are set appropriately?
Can do this by replaying the random chunking in the test case set up.
(DONE)

4. Correction testing could be handled by generalising the existing tests so as to start with one set of histories for various ids and then cutover to a completely different set, which is what would be tested against.

Could do this by having a mixture of throwaway histories on the ids under test, plus some throwaway ids whose changes are all eventually annulled.

(FIRST TEST DONE)(SECOND TEST DONE, BUT ONLY USING ONE AS-OF TO QUERY AT - NEED A THIRD TEST THAT QUERIES AT SEVERAL AS-OFS IN THE SAME TEST CASE - NOW DONE).

Additional test - annulments that refer to events that have either never been defined or have already been annulled are permitted, but have no effect.
(DONE)
---------------------------------------------------------------------------------------------------------------------------

5. Need tests on the read / write access to raw objects in changes and rendered from query scopes.

(DONE FOR FIRST-ORDER MUTATION, AM LEAVING IT FOR NOW THE HIGHER-ORDER DUE TO ISSUES WITH PROXIES - can only proxy interfaces or assume certain constructors on the proxied class)

---------------------------------------------------------------------------------------------------------------------------

Actually, need to implement the support for equality the 'MonadPlus' typeclass - presumably with a scope made on the fly so that the lhs and rhs bitemporals can both be rendered against it.
(DONE - A BIT MESSY, BUT WORKS WELL - could tidy this up so as to use an identifiable type that isn't a kind of 'History', and has a directly usable integer property - DONE.)

6. Are there tests for wildcards, plus the various flavours of id-matching? What about the 'none' case? What about having several items of different type sharing the same id?
(DONE)

(**** REMEMBER ****) What about attempting to book in a revision that would lead to a new item sharing the same id as one with a sub- or -supertype?
(DONE)

Pay attention to the 'withId' case - need several items to match the same id as well as zero or one.
Similarly, wildcards need zero, one or many matches. (DONE)

7. Does there need to be a test that shows off combinations of rendered items in a Bitemporal monad? So we can see the interaction between histories of several items. Could this be mixed in with the existing tests?
(GOT THIS ALEADY FROM THE 'MonadPlus' TEST SUITE)

8. Bolster the monad-plus generator with bitemporals made from ids / wildcard / none.

(DONE)

---------------------------------------------------------------------------------------------------------------------------

9. Tests for measurements and annihilations.

(ANNIHILATIONS - DONE)

(OBSERVATIONS - got the general 'mix in measurements' test support done. Need a test to prove that an measurement spore cannot read from a scope.)

(DONE)

---------------------------------------------------------------------------------------------------------------------------

10. Is all of the commentary in the API covered by tests? OK if doing fault injection reveals a failure via existing tests?

For example, is there a test that checks that a scope passed to a change's spore captures the state of the world at the event when of the change, only without that change applied (or any other subsequent events)?

Could do this for one of the test data classes by imposing a precondition on the setter that the new value is, say, one greater than the previous value - if the test can guarantee this the absence of a precondition failure implies
that the scope in a spore captures all the history up to, but not including, the change.

(THIS IS ALREADY TESTED INDIRECTLY - HAVE ADDED COMMENTARY TO DOCUMENT THIS)
(NOW AVOIDED AS MEASUREMENTS PRECLUDE EVENTS REFERRING TO STATE AT A POINT IN TIME - ALTHOUGH THE UPDATE OPERATION ITSELF MAY REFER TO LOCAL STATE)

11. Use mixin technique to do design-by-contract precondition checking in a trait for the various bits and pieces.

(DONE)

---------------------------------------------------------------------------------------------------------------------------

12. Time to introduce the scalable implementation - this will be based on a timeline whose implementation will take over from the existing patch recorder implementation.

A timeline will exhibit a pure functional API that creates a brand new timeline from an existing one, given the same inputs that would be given to the existing 'World.revise'.

If the world history for the new timeline turns out to be inconsistent, the creation is aborted by throwing an exception.

This means that experimental worlds can be supported directly simply by branching a new timeline off an old one, provided that old timelines are kept around. Hmm.

This also paves the way for only evaluating a world timeline once and persisting the resulting item states in a manner associated with the timeline. Hmm.

Need to share state efficiently too, both for timelines and for item states. This also has to take into account the branching implicit when doing experimental worlds.

One possibility is to calculate a new world timeline without regard to exception safety, persisting as we go into an experimental world.
If everything works out, the data in the experimental world is moved across into the original world, otherwise all keys in the experimental world are simply purged.

What are the goals - all we want to do now is to be able to *incrementally* define a new world revision - queries can be slow if needs be for now. So can experimental worlds, for that matter.

Also, start with an in-memory implementation that holds on to all events, lifecycle bits and pieces and snapshotted item states.

Do not try to merge the cacheing for the 'ItemStateReferenceResolutionContext' implementation with what's been done for the 'IdentifiedItemsScope' - they are really
two different things. We can reuse the helpers in the companion object of 'IdentifiedItemsScope', though.

The plan for reconstituting items in a query is based on prior serialization of items recording only the top-level item using the usual serialized representation.

Any references from the top-level item to other items are converted to a placeholder case class instance that captures the item's class (not the static type tag) and id.

During reconstitution, the placeholders are deserialized by referring to the context - this either supplies existing items that have already been deserialized, or recursively calls top-level deserialization to create the referenced item and populate the context.

(OPTIMISATION: consider cacheing type tags associated with class objects, possibly pre-populating the cache via known type tags captured from the API, or working directly with class objects where appropriate).